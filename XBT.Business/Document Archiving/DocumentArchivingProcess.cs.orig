using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using XBT.Data;
using XBT.Model;

namespace XBT.Business
{
  /// <summary>
  /// Contains methods responsible for the document indexing and archiving processes
  /// </summary>
  public class DocumentArchivingProcess
  {
    private XbtContext uow;

    /// <summary>
    /// Constructor
    /// </summary>
    public DocumentArchivingProcess()
    {
      uow = new XbtContext();
    }

    /// <summary>
    /// Retrieves all document groups
    /// </summary>
    /// <returns>IEnumerable list of document groups</returns>
    public IEnumerable<DocumentGroup> GetDocumentGroups()
    {
      var repo = new GenericRepository<DocumentGroup>(uow);

      //Retreive all document groups
      return repo.Get().ToList();
    }

    /// <summary>
    /// Retrieves document types in a selected document group
    /// </summary>
    /// <returns>IEnumerable list of document types</returns>
    public IEnumerable<DocumentType> GetDocumentTypesInDocumentGroup(int documentGroupId)
    {
      var repo = new GenericRepository<DocumentType>(uow);

      //Retreive all document groups
      return repo.Get().Where(d => d.DocumentGroup.Id == documentGroupId).ToList();
    }

    /// <summary>
    /// Retrieves document tags in a selected document type
    /// </summary>
    /// <returns>IEnumerable list of document types</returns>
    public IEnumerable<DocumentTag> GetDocumentTagsInDocumentType(int documentTypeId)
    {
      var repo = new GenericRepository<DocumentTag>(uow);

      //Retreive all document tags in a document type
      return repo.Get().Where(d => d.DocumentTypes.FirstOrDefault(t => t.Id == documentTypeId).Id == documentTypeId).ToList();
    }

    ///<summary>
    /// Retreives a list files names from a directory which contains files for a sppecified documentype
    /// </summary>
    /// <param name="documentTypeId"></param>
    /// <returns>Queue of files</returns>
    public Queue<string> GetFileNamesInDirectory(int documentTypeId)
    {
      var fileQueue = new Queue<string>();

      //Retrieve document type 
      var repo = new GenericRepository<DocumentType>(uow);
      var selectedDocumentType = repo.GetById(documentTypeId);

      //If the document type was retreived successfully..
      if (selectedDocumentType != null)
      {
        //Retrieve directory where the files are stored
        string documentTypeFilesDirectory = Path.GetFullPath(selectedDocumentType.DocumentDirectory);

        //TODO: Handle exceptions 
        //Retrieve documents file names for the selected document type and add them to a queue for this document type 
        string[] fileList = Directory.GetFiles(documentTypeFilesDirectory);

        //If there were files found in the directory
        if (fileList.GetLength(0) > 0)
        {
<<<<<<< HEAD
            var repo = new GenericRepository<Document>(uow);
            return repo.Get(includeProperties: "DocumentType");
=======
          //Add files to the queue
          foreach (string fileName in fileList)
            fileQueue.Enqueue(fileName);

          return fileQueue;
>>>>>>> 59be85f4a63d7f5b4fad7d3f2d6aed7b0135a68d
        }
      }
      return null;
    }

    public IEnumerable<Document> GetMyDocuments()
    {
      var repo = new GenericRepository<Document>(uow);
      return repo.Get();
    }

    public bool SaveDocumentDocument(Document document)
    {
      //Validate metadata

      //Generate serial number

      //Generate security hash for the document file

      //Move file from current directory to archive 

      //Save document metadata
      var repo = new GenericRepository<Document>(uow);
      repo.Insert(document);

      //if insert was not successful
      if (uow.SaveChanges() < 1)
      {
        return false;
      }

      return true;
    }
  }
}

